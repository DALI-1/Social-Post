// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialPostBackEnd.Data;

#nullable disable

namespace SocialPostBackEnd.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CountryPost", b =>
                {
                    b.Property<long>("Country_Targeted_PostsId")
                        .HasColumnType("bigint");

                    b.Property<long>("POST_Targeted_CountriesId")
                        .HasColumnType("bigint");

                    b.HasKey("Country_Targeted_PostsId", "POST_Targeted_CountriesId");

                    b.HasIndex("POST_Targeted_CountriesId");

                    b.ToTable("PostCountries", (string)null);
                });

            modelBuilder.Entity("GroupMenuItem", b =>
                {
                    b.Property<long>("MenuItemGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("MenuItemsId")
                        .HasColumnType("bigint");

                    b.HasKey("MenuItemGroupsId", "MenuItemsId");

                    b.HasIndex("MenuItemsId");

                    b.ToTable("MenuItemGroups", (string)null);
                });

            modelBuilder.Entity("GroupMenuItemAction", b =>
                {
                    b.Property<long>("MenuActionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermitedMenuItemActionGroupsId")
                        .HasColumnType("bigint");

                    b.HasKey("MenuActionsId", "PermitedMenuItemActionGroupsId");

                    b.HasIndex("PermitedMenuItemActionGroupsId");

                    b.ToTable("GroupMenuItemActions", (string)null);
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.Property<long>("JoinedGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("JoinedUsersId")
                        .HasColumnType("bigint");

                    b.HasKey("JoinedGroupsId", "JoinedUsersId");

                    b.HasIndex("JoinedUsersId");

                    b.ToTable("UserGroup", (string)null);
                });

            modelBuilder.Entity("InterestPost", b =>
                {
                    b.Property<long>("Interest_Targeted_PostsId")
                        .HasColumnType("bigint");

                    b.Property<long>("POST_Targeted_InterestsId")
                        .HasColumnType("bigint");

                    b.HasKey("Interest_Targeted_PostsId", "POST_Targeted_InterestsId");

                    b.HasIndex("POST_Targeted_InterestsId");

                    b.ToTable("PostInterests", (string)null);
                });

            modelBuilder.Entity("LanguagePost", b =>
                {
                    b.Property<long>("Language_Targeted_PostsId")
                        .HasColumnType("bigint");

                    b.Property<long>("POST_Targeted_LanguagesId")
                        .HasColumnType("bigint");

                    b.HasKey("Language_Targeted_PostsId", "POST_Targeted_LanguagesId");

                    b.HasIndex("POST_Targeted_LanguagesId");

                    b.ToTable("PostLanguages", (string)null);
                });

            modelBuilder.Entity("LocationPost", b =>
                {
                    b.Property<long>("Location_Targeted_PostsId")
                        .HasColumnType("bigint");

                    b.Property<long>("POST_Targeted_LocationsId")
                        .HasColumnType("bigint");

                    b.HasKey("Location_Targeted_PostsId", "POST_Targeted_LocationsId");

                    b.HasIndex("POST_Targeted_LocationsId");

                    b.ToTable("PostLocations", (string)null);
                });

            modelBuilder.Entity("PlatformPagePost", b =>
                {
                    b.Property<long>("PagesId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostsId")
                        .HasColumnType("bigint");

                    b.HasKey("PagesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("PagePost", (string)null);
                });

            modelBuilder.Entity("PostRegion", b =>
                {
                    b.Property<long>("POST_Targeted_RegionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("Region_Targeted_PostsId")
                        .HasColumnType("bigint");

                    b.HasKey("POST_Targeted_RegionsId", "Region_Targeted_PostsId");

                    b.HasIndex("Region_Targeted_PostsId");

                    b.ToTable("PostRegions", (string)null);
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.AgeRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Max_age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Min_age")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRanges");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ResourceURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("GroupId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.AssetPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("AssetId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ThumbnailID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PostId");

                    b.HasIndex("ThumbnailID");

                    b.ToTable("PostAssets");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Country_Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country_PlatformCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Country_PlatformId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Country_PlatformId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.DynamicField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("PageID")
                        .HasColumnType("bigint");

                    b.Property<long?>("PatternId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostID")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PageID");

                    b.HasIndex("PatternId");

                    b.HasIndex("PostID");

                    b.ToTable("DynamicFields");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Gender_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Group_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("ParentGroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RecentModificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("ParentGroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.GroupModification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModificationLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupModifications");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Interest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Interest_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interest_PlatformCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Interest_PlatformId")
                        .HasColumnType("bigint");

                    b.Property<string>("Interest_Topic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Interest_PlatformId");

                    b.ToTable("Interests");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Language_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Language_PlatformId")
                        .HasColumnType("bigint");

                    b.Property<string>("Language_PlatformKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Language_PlatformId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Location_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location_PlatformCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Location_PlatformId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Location_RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Location_PlatformId");

                    b.HasIndex("Location_RegionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.MentionedAccountPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("Mentioned_PlatformAccount_ID")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Mentioned_PlatformAccount_ID");

                    b.HasIndex("PostId");

                    b.ToTable("MentionedAccountPost");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.MenuItemAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MenuItemId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.ToTable("MenuItemActions");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Pattern", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("PatternName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatternText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Patterns");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Platform", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("PlatformLogoImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformPolicyUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatformUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccessTokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AddUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("CachedData_Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_First_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CachedData_IsChanged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CachedData_LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CachedData_Last_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_PictureHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CachedData_PictureIs_silhouette")
                        .HasColumnType("bit");

                    b.Property<string>("CachedData_PictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_PictureWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Is_AddedBySearchService")
                        .HasColumnType("bit");

                    b.Property<bool?>("Is_Mentionable")
                        .HasColumnType("bit");

                    b.Property<bool?>("Is_Tagable")
                        .HasColumnType("bit");

                    b.Property<string>("PlatformAccountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PlatformID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("PlatformID");

                    b.ToTable("PlatformAccounts");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("App_AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("App_DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment_Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PlatformId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlatformPost_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Platform_CommentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Platform_CreateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PlatformPost_ID");

                    b.ToTable("PlatformComments");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformLike", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("App_AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("App_DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PlatformId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlatformPost_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Platform_LikeID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlatfromAccount_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PlatformPost_ID");

                    b.ToTable("PlatformLikes");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformPage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AccessTokenExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AddUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssociatedByPlatformPageID")
                        .HasColumnType("bigint");

                    b.Property<string>("CachedData_About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CachedData_IsChanged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CachedData_LastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CachedData_Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_PictureHeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CachedData_PictureIs_silhouette")
                        .HasColumnType("bit");

                    b.Property<string>("CachedData_PictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_PictureWidth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_WebsiteURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_fan_count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CachedData_followers_count")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PageOwnerID")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlatformID")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlatformPageID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddUserId");

                    b.HasIndex("AssociatedByPlatformPageID");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PageOwnerID");

                    b.HasIndex("PlatformID");

                    b.ToTable("PlatformPages");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("App_AddDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("App_DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("App_PostID")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsAppPosted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PlatformId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlatformPage_ID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Platform_CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostPlatformID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SharesCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("App_PostID");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PlatformPage_ID");

                    b.ToTable("PlatformPosts");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndRepeatAfterDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EndRepeatOnOccurence")
                        .HasColumnType("bigint");

                    b.Property<string>("EndRepeatOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EndRepeatPost")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPosted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTargeted")
                        .HasColumnType("bit");

                    b.Property<long?>("POST_Targeted_AgeRangeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("POST_Targeted_GenderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PostGroupID")
                        .HasColumnType("bigint");

                    b.Property<string>("PostText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Post_Occurence")
                        .HasColumnType("bigint");

                    b.Property<string>("RepeatOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RepeatPost")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeleteUserId");

                    b.HasIndex("POST_Targeted_AgeRangeId");

                    b.HasIndex("POST_Targeted_GenderId");

                    b.HasIndex("PostGroupID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PostHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("InseightsTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PlatformPageID")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostID")
                        .HasColumnType("bigint");

                    b.Property<string>("Post_Comment_TotalCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post_Likes_TotalCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Post_Shares_TotalCount")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformPageID");

                    b.HasIndex("PostID");

                    b.ToTable("PostsHistory");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("Region_CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Region_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region_PlatformCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Region_PlatformId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Region_CountryId");

                    b.HasIndex("Region_PlatformId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("App_Screen_x")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("App_Screen_y")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("App_ScrollLeftValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("App_ScrollTopValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TaggedAssetPost_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("TaggedImage_X")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaggedImage_Y")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TaggedPlatformAccount_ID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaggedAssetPost_ID");

                    b.HasIndex("TaggedPlatformAccount_ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BirthdayDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DeleteUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CountryPost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("Country_Targeted_PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("POST_Targeted_CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupMenuItem", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("MenuItemGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupMenuItemAction", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.MenuItemAction", null)
                        .WithMany()
                        .HasForeignKey("MenuActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("PermitedMenuItemActionGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GroupUser", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("JoinedGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("JoinedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InterestPost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("Interest_Targeted_PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.Interest", null)
                        .WithMany()
                        .HasForeignKey("POST_Targeted_InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguagePost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("Language_Targeted_PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.Language", null)
                        .WithMany()
                        .HasForeignKey("POST_Targeted_LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationPost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("Location_Targeted_PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.Location", null)
                        .WithMany()
                        .HasForeignKey("POST_Targeted_LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformPagePost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.PlatformPage", null)
                        .WithMany()
                        .HasForeignKey("PagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostRegion", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Region", null)
                        .WithMany()
                        .HasForeignKey("POST_Targeted_RegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialPostBackEnd.Models.Post", null)
                        .WithMany()
                        .HasForeignKey("Region_Targeted_PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Asset", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SocialPostBackEnd.Models.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("SocialPostBackEnd.Models.Group", "Group")
                        .WithMany("GroupAssets")
                        .HasForeignKey("GroupId");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.AssetPost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Asset", "Asset")
                        .WithMany("PostsUsedAt")
                        .HasForeignKey("AssetId");

                    b.HasOne("SocialPostBackEnd.Models.Post", "Post")
                        .WithMany("UsedAssets")
                        .HasForeignKey("PostId");

                    b.HasOne("SocialPostBackEnd.Models.Asset", "Thumbnail")
                        .WithMany("PostsThumbnails")
                        .HasForeignKey("ThumbnailID");

                    b.Navigation("Asset");

                    b.Navigation("Post");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Country", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Platform", "Country_Platform")
                        .WithMany()
                        .HasForeignKey("Country_PlatformId");

                    b.Navigation("Country_Platform");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.DynamicField", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.PlatformPage", "PlatformPage")
                        .WithMany()
                        .HasForeignKey("PageID");

                    b.HasOne("SocialPostBackEnd.Models.Pattern", "Pattern")
                        .WithMany("AssociatedDynamicFields")
                        .HasForeignKey("PatternId");

                    b.HasOne("SocialPostBackEnd.Models.Post", "Post")
                        .WithMany("PostDynamicFields")
                        .HasForeignKey("PostID");

                    b.Navigation("Pattern");

                    b.Navigation("PlatformPage");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Group", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.User", "CreateUser")
                        .WithMany("CreatedGroups")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SocialPostBackEnd.Models.User", "DeleteUser")
                        .WithMany("DeletedGroups")
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("SocialPostBackEnd.Models.Group", "ParentGroup")
                        .WithMany("SubGroups")
                        .HasForeignKey("ParentGroupId");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("ParentGroup");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.GroupModification", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Group", "Group")
                        .WithMany("Modifications")
                        .HasForeignKey("GroupId");

                    b.HasOne("SocialPostBackEnd.Models.User", "User")
                        .WithMany("Modifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Interest", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Platform", "Interest_Platform")
                        .WithMany()
                        .HasForeignKey("Interest_PlatformId");

                    b.Navigation("Interest_Platform");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Language", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Platform", "Language_Platform")
                        .WithMany()
                        .HasForeignKey("Language_PlatformId");

                    b.Navigation("Language_Platform");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Location", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Platform", "Location_Platform")
                        .WithMany()
                        .HasForeignKey("Location_PlatformId");

                    b.HasOne("SocialPostBackEnd.Models.Region", "Location_Region")
                        .WithMany("Region_Locations")
                        .HasForeignKey("Location_RegionId");

                    b.Navigation("Location_Platform");

                    b.Navigation("Location_Region");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.MentionedAccountPost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.PlatformAccount", "Mentioned_PlatformAccount")
                        .WithMany("Mentions")
                        .HasForeignKey("Mentioned_PlatformAccount_ID");

                    b.HasOne("SocialPostBackEnd.Models.Post", "Post")
                        .WithMany("PostMentions")
                        .HasForeignKey("PostId");

                    b.Navigation("Mentioned_PlatformAccount");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.MenuItemAction", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Pattern", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Group", "Group")
                        .WithMany("GroupPatterns")
                        .HasForeignKey("GroupId");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformAccount", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.User", "AddUser")
                        .WithMany("AddedPlatformAccounts")
                        .HasForeignKey("AddUserId");

                    b.HasOne("SocialPostBackEnd.Models.User", "DeleteUser")
                        .WithMany("DeletedPlatformAccounts")
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("SocialPostBackEnd.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformID");

                    b.Navigation("AddUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformComment", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("SocialPostBackEnd.Models.PlatformPost", "PlatformPost")
                        .WithMany("PostComments")
                        .HasForeignKey("PlatformPost_ID");

                    b.Navigation("Platform");

                    b.Navigation("PlatformPost");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformLike", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("SocialPostBackEnd.Models.PlatformPost", "PlatformPost")
                        .WithMany("PostLikes")
                        .HasForeignKey("PlatformPost_ID");

                    b.Navigation("Platform");

                    b.Navigation("PlatformPost");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformPage", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.User", "AddUser")
                        .WithMany("AddedPlatformPages")
                        .HasForeignKey("AddUserId");

                    b.HasOne("SocialPostBackEnd.Models.PlatformPage", "AssociatedByPlatformPage")
                        .WithMany("AssociatedPlatformPages")
                        .HasForeignKey("AssociatedByPlatformPageID");

                    b.HasOne("SocialPostBackEnd.Models.User", "DeleteUser")
                        .WithMany("DeletedPlatformPages")
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("SocialPostBackEnd.Models.Group", "Group")
                        .WithMany("PlatformPages")
                        .HasForeignKey("GroupId");

                    b.HasOne("SocialPostBackEnd.Models.PlatformAccount", "PageOwner")
                        .WithMany()
                        .HasForeignKey("PageOwnerID");

                    b.HasOne("SocialPostBackEnd.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformID");

                    b.Navigation("AddUser");

                    b.Navigation("AssociatedByPlatformPage");

                    b.Navigation("DeleteUser");

                    b.Navigation("Group");

                    b.Navigation("PageOwner");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformPost", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Post", "App_Post")
                        .WithMany("Posted_PlatformPosts")
                        .HasForeignKey("App_PostID");

                    b.HasOne("SocialPostBackEnd.Models.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId");

                    b.HasOne("SocialPostBackEnd.Models.PlatformPage", "PlatformPage")
                        .WithMany("Posted_PlatformPosts")
                        .HasForeignKey("PlatformPage_ID");

                    b.Navigation("App_Post");

                    b.Navigation("Platform");

                    b.Navigation("PlatformPage");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Post", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.User", "CreateUser")
                        .WithMany("AddedPosts")
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SocialPostBackEnd.Models.User", "DeleteUser")
                        .WithMany("DeletedPosts")
                        .HasForeignKey("DeleteUserId");

                    b.HasOne("SocialPostBackEnd.Models.AgeRange", "POST_Targeted_AgeRange")
                        .WithMany()
                        .HasForeignKey("POST_Targeted_AgeRangeId");

                    b.HasOne("SocialPostBackEnd.Models.Gender", "POST_Targeted_Gender")
                        .WithMany()
                        .HasForeignKey("POST_Targeted_GenderId");

                    b.HasOne("SocialPostBackEnd.Models.Group", "Group")
                        .WithMany("GroupPosts")
                        .HasForeignKey("PostGroupID");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");

                    b.Navigation("Group");

                    b.Navigation("POST_Targeted_AgeRange");

                    b.Navigation("POST_Targeted_Gender");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PostHistory", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.PlatformPage", "PlatformPage")
                        .WithMany("PageInseightsHistory")
                        .HasForeignKey("PlatformPageID");

                    b.HasOne("SocialPostBackEnd.Models.Post", "Post")
                        .WithMany("PostInseightsHistory")
                        .HasForeignKey("PostID");

                    b.Navigation("PlatformPage");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Region", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.Country", "Region_Country")
                        .WithMany("Country_Regions")
                        .HasForeignKey("Region_CountryId");

                    b.HasOne("SocialPostBackEnd.Models.Platform", "Region_Platform")
                        .WithMany()
                        .HasForeignKey("Region_PlatformId");

                    b.Navigation("Region_Country");

                    b.Navigation("Region_Platform");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Tag", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.AssetPost", "TaggedAssetPost")
                        .WithMany("Asset_Tags")
                        .HasForeignKey("TaggedAssetPost_ID");

                    b.HasOne("SocialPostBackEnd.Models.PlatformAccount", "TaggedPlatformAccount")
                        .WithMany("ListOfTags")
                        .HasForeignKey("TaggedPlatformAccount_ID");

                    b.Navigation("TaggedAssetPost");

                    b.Navigation("TaggedPlatformAccount");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.User", b =>
                {
                    b.HasOne("SocialPostBackEnd.Models.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("SocialPostBackEnd.Models.User", "DeleteUser")
                        .WithMany()
                        .HasForeignKey("DeleteUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("DeleteUser");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Asset", b =>
                {
                    b.Navigation("PostsThumbnails");

                    b.Navigation("PostsUsedAt");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.AssetPost", b =>
                {
                    b.Navigation("Asset_Tags");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Country", b =>
                {
                    b.Navigation("Country_Regions");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Group", b =>
                {
                    b.Navigation("GroupAssets");

                    b.Navigation("GroupPatterns");

                    b.Navigation("GroupPosts");

                    b.Navigation("Modifications");

                    b.Navigation("PlatformPages");

                    b.Navigation("SubGroups");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Pattern", b =>
                {
                    b.Navigation("AssociatedDynamicFields");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformAccount", b =>
                {
                    b.Navigation("ListOfTags");

                    b.Navigation("Mentions");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformPage", b =>
                {
                    b.Navigation("AssociatedPlatformPages");

                    b.Navigation("PageInseightsHistory");

                    b.Navigation("Posted_PlatformPosts");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.PlatformPost", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Post", b =>
                {
                    b.Navigation("PostDynamicFields");

                    b.Navigation("PostInseightsHistory");

                    b.Navigation("PostMentions");

                    b.Navigation("Posted_PlatformPosts");

                    b.Navigation("UsedAssets");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.Region", b =>
                {
                    b.Navigation("Region_Locations");
                });

            modelBuilder.Entity("SocialPostBackEnd.Models.User", b =>
                {
                    b.Navigation("AddedPlatformAccounts");

                    b.Navigation("AddedPlatformPages");

                    b.Navigation("AddedPosts");

                    b.Navigation("CreatedGroups");

                    b.Navigation("DeletedGroups");

                    b.Navigation("DeletedPlatformAccounts");

                    b.Navigation("DeletedPlatformPages");

                    b.Navigation("DeletedPosts");

                    b.Navigation("Modifications");
                });
#pragma warning restore 612, 618
        }
    }
}
